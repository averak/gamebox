// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserJankenSessionHistory is an object representing the database table.
type UserJankenSessionHistory struct {
	GameSessionID string    `boil:"game_session_id" json:"game_session_id" toml:"game_session_id" yaml:"game_session_id"`
	Turn          int       `boil:"turn" json:"turn" toml:"turn" yaml:"turn"`
	MyHand        int       `boil:"my_hand" json:"my_hand" toml:"my_hand" yaml:"my_hand"`
	OpponentHand  int       `boil:"opponent_hand" json:"opponent_hand" toml:"opponent_hand" yaml:"opponent_hand"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userJankenSessionHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userJankenSessionHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserJankenSessionHistoryColumns = struct {
	GameSessionID string
	Turn          string
	MyHand        string
	OpponentHand  string
	CreatedAt     string
	UpdatedAt     string
}{
	GameSessionID: "game_session_id",
	Turn:          "turn",
	MyHand:        "my_hand",
	OpponentHand:  "opponent_hand",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var UserJankenSessionHistoryTableColumns = struct {
	GameSessionID string
	Turn          string
	MyHand        string
	OpponentHand  string
	CreatedAt     string
	UpdatedAt     string
}{
	GameSessionID: "user_janken_session_histories.game_session_id",
	Turn:          "user_janken_session_histories.turn",
	MyHand:        "user_janken_session_histories.my_hand",
	OpponentHand:  "user_janken_session_histories.opponent_hand",
	CreatedAt:     "user_janken_session_histories.created_at",
	UpdatedAt:     "user_janken_session_histories.updated_at",
}

// Generated where

var UserJankenSessionHistoryWhere = struct {
	GameSessionID whereHelperstring
	Turn          whereHelperint
	MyHand        whereHelperint
	OpponentHand  whereHelperint
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	GameSessionID: whereHelperstring{field: "\"user_janken_session_histories\".\"game_session_id\""},
	Turn:          whereHelperint{field: "\"user_janken_session_histories\".\"turn\""},
	MyHand:        whereHelperint{field: "\"user_janken_session_histories\".\"my_hand\""},
	OpponentHand:  whereHelperint{field: "\"user_janken_session_histories\".\"opponent_hand\""},
	CreatedAt:     whereHelpertime_Time{field: "\"user_janken_session_histories\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"user_janken_session_histories\".\"updated_at\""},
}

// UserJankenSessionHistoryRels is where relationship names are stored.
var UserJankenSessionHistoryRels = struct {
	GameSession string
}{
	GameSession: "GameSession",
}

// userJankenSessionHistoryR is where relationships are stored.
type userJankenSessionHistoryR struct {
	GameSession *UserJankenSession `boil:"GameSession" json:"GameSession" toml:"GameSession" yaml:"GameSession"`
}

// NewStruct creates a new relationship struct
func (*userJankenSessionHistoryR) NewStruct() *userJankenSessionHistoryR {
	return &userJankenSessionHistoryR{}
}

func (r *userJankenSessionHistoryR) GetGameSession() *UserJankenSession {
	if r == nil {
		return nil
	}
	return r.GameSession
}

// userJankenSessionHistoryL is where Load methods for each relationship are stored.
type userJankenSessionHistoryL struct{}

var (
	userJankenSessionHistoryAllColumns            = []string{"game_session_id", "turn", "my_hand", "opponent_hand", "created_at", "updated_at"}
	userJankenSessionHistoryColumnsWithoutDefault = []string{"game_session_id", "turn", "my_hand", "opponent_hand", "created_at", "updated_at"}
	userJankenSessionHistoryColumnsWithDefault    = []string{}
	userJankenSessionHistoryPrimaryKeyColumns     = []string{"game_session_id", "turn"}
	userJankenSessionHistoryGeneratedColumns      = []string{}
)

type (
	// UserJankenSessionHistorySlice is an alias for a slice of pointers to UserJankenSessionHistory.
	// This should almost always be used instead of []UserJankenSessionHistory.
	UserJankenSessionHistorySlice []*UserJankenSessionHistory
	// UserJankenSessionHistoryHook is the signature for custom UserJankenSessionHistory hook methods
	UserJankenSessionHistoryHook func(context.Context, boil.ContextExecutor, *UserJankenSessionHistory) error

	userJankenSessionHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userJankenSessionHistoryType                 = reflect.TypeOf(&UserJankenSessionHistory{})
	userJankenSessionHistoryMapping              = queries.MakeStructMapping(userJankenSessionHistoryType)
	userJankenSessionHistoryPrimaryKeyMapping, _ = queries.BindMapping(userJankenSessionHistoryType, userJankenSessionHistoryMapping, userJankenSessionHistoryPrimaryKeyColumns)
	userJankenSessionHistoryInsertCacheMut       sync.RWMutex
	userJankenSessionHistoryInsertCache          = make(map[string]insertCache)
	userJankenSessionHistoryUpdateCacheMut       sync.RWMutex
	userJankenSessionHistoryUpdateCache          = make(map[string]updateCache)
	userJankenSessionHistoryUpsertCacheMut       sync.RWMutex
	userJankenSessionHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userJankenSessionHistoryAfterSelectMu sync.Mutex
var userJankenSessionHistoryAfterSelectHooks []UserJankenSessionHistoryHook

var userJankenSessionHistoryBeforeInsertMu sync.Mutex
var userJankenSessionHistoryBeforeInsertHooks []UserJankenSessionHistoryHook
var userJankenSessionHistoryAfterInsertMu sync.Mutex
var userJankenSessionHistoryAfterInsertHooks []UserJankenSessionHistoryHook

var userJankenSessionHistoryBeforeUpdateMu sync.Mutex
var userJankenSessionHistoryBeforeUpdateHooks []UserJankenSessionHistoryHook
var userJankenSessionHistoryAfterUpdateMu sync.Mutex
var userJankenSessionHistoryAfterUpdateHooks []UserJankenSessionHistoryHook

var userJankenSessionHistoryBeforeDeleteMu sync.Mutex
var userJankenSessionHistoryBeforeDeleteHooks []UserJankenSessionHistoryHook
var userJankenSessionHistoryAfterDeleteMu sync.Mutex
var userJankenSessionHistoryAfterDeleteHooks []UserJankenSessionHistoryHook

var userJankenSessionHistoryBeforeUpsertMu sync.Mutex
var userJankenSessionHistoryBeforeUpsertHooks []UserJankenSessionHistoryHook
var userJankenSessionHistoryAfterUpsertMu sync.Mutex
var userJankenSessionHistoryAfterUpsertHooks []UserJankenSessionHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserJankenSessionHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserJankenSessionHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserJankenSessionHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserJankenSessionHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserJankenSessionHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserJankenSessionHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserJankenSessionHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserJankenSessionHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserJankenSessionHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserJankenSessionHistoryHook registers your hook function for all future operations.
func AddUserJankenSessionHistoryHook(hookPoint boil.HookPoint, userJankenSessionHistoryHook UserJankenSessionHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userJankenSessionHistoryAfterSelectMu.Lock()
		userJankenSessionHistoryAfterSelectHooks = append(userJankenSessionHistoryAfterSelectHooks, userJankenSessionHistoryHook)
		userJankenSessionHistoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userJankenSessionHistoryBeforeInsertMu.Lock()
		userJankenSessionHistoryBeforeInsertHooks = append(userJankenSessionHistoryBeforeInsertHooks, userJankenSessionHistoryHook)
		userJankenSessionHistoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userJankenSessionHistoryAfterInsertMu.Lock()
		userJankenSessionHistoryAfterInsertHooks = append(userJankenSessionHistoryAfterInsertHooks, userJankenSessionHistoryHook)
		userJankenSessionHistoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userJankenSessionHistoryBeforeUpdateMu.Lock()
		userJankenSessionHistoryBeforeUpdateHooks = append(userJankenSessionHistoryBeforeUpdateHooks, userJankenSessionHistoryHook)
		userJankenSessionHistoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userJankenSessionHistoryAfterUpdateMu.Lock()
		userJankenSessionHistoryAfterUpdateHooks = append(userJankenSessionHistoryAfterUpdateHooks, userJankenSessionHistoryHook)
		userJankenSessionHistoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userJankenSessionHistoryBeforeDeleteMu.Lock()
		userJankenSessionHistoryBeforeDeleteHooks = append(userJankenSessionHistoryBeforeDeleteHooks, userJankenSessionHistoryHook)
		userJankenSessionHistoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userJankenSessionHistoryAfterDeleteMu.Lock()
		userJankenSessionHistoryAfterDeleteHooks = append(userJankenSessionHistoryAfterDeleteHooks, userJankenSessionHistoryHook)
		userJankenSessionHistoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userJankenSessionHistoryBeforeUpsertMu.Lock()
		userJankenSessionHistoryBeforeUpsertHooks = append(userJankenSessionHistoryBeforeUpsertHooks, userJankenSessionHistoryHook)
		userJankenSessionHistoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userJankenSessionHistoryAfterUpsertMu.Lock()
		userJankenSessionHistoryAfterUpsertHooks = append(userJankenSessionHistoryAfterUpsertHooks, userJankenSessionHistoryHook)
		userJankenSessionHistoryAfterUpsertMu.Unlock()
	}
}

// One returns a single userJankenSessionHistory record from the query.
func (q userJankenSessionHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserJankenSessionHistory, error) {
	o := &UserJankenSessionHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: failed to execute a one query for user_janken_session_histories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserJankenSessionHistory records from the query.
func (q userJankenSessionHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserJankenSessionHistorySlice, error) {
	var o []*UserJankenSessionHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dao: failed to assign all query results to UserJankenSessionHistory slice")
	}

	if len(userJankenSessionHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserJankenSessionHistory records in the query.
func (q userJankenSessionHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to count user_janken_session_histories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userJankenSessionHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dao: failed to check if user_janken_session_histories exists")
	}

	return count > 0, nil
}

// GameSession pointed to by the foreign key.
func (o *UserJankenSessionHistory) GameSession(mods ...qm.QueryMod) userJankenSessionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"game_session_id\" = ?", o.GameSessionID),
	}

	queryMods = append(queryMods, mods...)

	return UserJankenSessions(queryMods...)
}

// LoadGameSession allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userJankenSessionHistoryL) LoadGameSession(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserJankenSessionHistory interface{}, mods queries.Applicator) error {
	var slice []*UserJankenSessionHistory
	var object *UserJankenSessionHistory

	if singular {
		var ok bool
		object, ok = maybeUserJankenSessionHistory.(*UserJankenSessionHistory)
		if !ok {
			object = new(UserJankenSessionHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserJankenSessionHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserJankenSessionHistory))
			}
		}
	} else {
		s, ok := maybeUserJankenSessionHistory.(*[]*UserJankenSessionHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserJankenSessionHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserJankenSessionHistory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userJankenSessionHistoryR{}
		}
		args[object.GameSessionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userJankenSessionHistoryR{}
			}

			args[obj.GameSessionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_janken_sessions`),
		qm.WhereIn(`user_janken_sessions.game_session_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserJankenSession")
	}

	var resultSlice []*UserJankenSession
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserJankenSession")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_janken_sessions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_janken_sessions")
	}

	if len(userJankenSessionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GameSession = foreign
		if foreign.R == nil {
			foreign.R = &userJankenSessionR{}
		}
		foreign.R.GameSessionUserJankenSessionHistories = append(foreign.R.GameSessionUserJankenSessionHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameSessionID == foreign.GameSessionID {
				local.R.GameSession = foreign
				if foreign.R == nil {
					foreign.R = &userJankenSessionR{}
				}
				foreign.R.GameSessionUserJankenSessionHistories = append(foreign.R.GameSessionUserJankenSessionHistories, local)
				break
			}
		}
	}

	return nil
}

// SetGameSession of the userJankenSessionHistory to the related item.
// Sets o.R.GameSession to related.
// Adds o to related.R.GameSessionUserJankenSessionHistories.
func (o *UserJankenSessionHistory) SetGameSession(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserJankenSession) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_janken_session_histories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_session_id"}),
		strmangle.WhereClause("\"", "\"", 2, userJankenSessionHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.GameSessionID, o.GameSessionID, o.Turn}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameSessionID = related.GameSessionID
	if o.R == nil {
		o.R = &userJankenSessionHistoryR{
			GameSession: related,
		}
	} else {
		o.R.GameSession = related
	}

	if related.R == nil {
		related.R = &userJankenSessionR{
			GameSessionUserJankenSessionHistories: UserJankenSessionHistorySlice{o},
		}
	} else {
		related.R.GameSessionUserJankenSessionHistories = append(related.R.GameSessionUserJankenSessionHistories, o)
	}

	return nil
}

// UserJankenSessionHistories retrieves all the records using an executor.
func UserJankenSessionHistories(mods ...qm.QueryMod) userJankenSessionHistoryQuery {
	mods = append(mods, qm.From("\"user_janken_session_histories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_janken_session_histories\".*"})
	}

	return userJankenSessionHistoryQuery{q}
}

// FindUserJankenSessionHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserJankenSessionHistory(ctx context.Context, exec boil.ContextExecutor, gameSessionID string, turn int, selectCols ...string) (*UserJankenSessionHistory, error) {
	userJankenSessionHistoryObj := &UserJankenSessionHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_janken_session_histories\" where \"game_session_id\"=$1 AND \"turn\"=$2", sel,
	)

	q := queries.Raw(query, gameSessionID, turn)

	err := q.Bind(ctx, exec, userJankenSessionHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: unable to select from user_janken_session_histories")
	}

	if err = userJankenSessionHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userJankenSessionHistoryObj, err
	}

	return userJankenSessionHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserJankenSessionHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no user_janken_session_histories provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userJankenSessionHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userJankenSessionHistoryInsertCacheMut.RLock()
	cache, cached := userJankenSessionHistoryInsertCache[key]
	userJankenSessionHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userJankenSessionHistoryAllColumns,
			userJankenSessionHistoryColumnsWithDefault,
			userJankenSessionHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userJankenSessionHistoryType, userJankenSessionHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userJankenSessionHistoryType, userJankenSessionHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_janken_session_histories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_janken_session_histories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dao: unable to insert into user_janken_session_histories")
	}

	if !cached {
		userJankenSessionHistoryInsertCacheMut.Lock()
		userJankenSessionHistoryInsertCache[key] = cache
		userJankenSessionHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserJankenSessionHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserJankenSessionHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userJankenSessionHistoryUpdateCacheMut.RLock()
	cache, cached := userJankenSessionHistoryUpdateCache[key]
	userJankenSessionHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userJankenSessionHistoryAllColumns,
			userJankenSessionHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dao: unable to update user_janken_session_histories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_janken_session_histories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userJankenSessionHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userJankenSessionHistoryType, userJankenSessionHistoryMapping, append(wl, userJankenSessionHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update user_janken_session_histories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by update for user_janken_session_histories")
	}

	if !cached {
		userJankenSessionHistoryUpdateCacheMut.Lock()
		userJankenSessionHistoryUpdateCache[key] = cache
		userJankenSessionHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userJankenSessionHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all for user_janken_session_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected for user_janken_session_histories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserJankenSessionHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dao: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userJankenSessionHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_janken_session_histories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userJankenSessionHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all in userJankenSessionHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected all in update all userJankenSessionHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserJankenSessionHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dao: no user_janken_session_histories provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userJankenSessionHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userJankenSessionHistoryUpsertCacheMut.RLock()
	cache, cached := userJankenSessionHistoryUpsertCache[key]
	userJankenSessionHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userJankenSessionHistoryAllColumns,
			userJankenSessionHistoryColumnsWithDefault,
			userJankenSessionHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userJankenSessionHistoryAllColumns,
			userJankenSessionHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dao: unable to upsert user_janken_session_histories, could not build update column list")
		}

		ret := strmangle.SetComplement(userJankenSessionHistoryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userJankenSessionHistoryPrimaryKeyColumns) == 0 {
				return errors.New("dao: unable to upsert user_janken_session_histories, could not build conflict column list")
			}

			conflict = make([]string, len(userJankenSessionHistoryPrimaryKeyColumns))
			copy(conflict, userJankenSessionHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_janken_session_histories\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userJankenSessionHistoryType, userJankenSessionHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userJankenSessionHistoryType, userJankenSessionHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dao: unable to upsert user_janken_session_histories")
	}

	if !cached {
		userJankenSessionHistoryUpsertCacheMut.Lock()
		userJankenSessionHistoryUpsertCache[key] = cache
		userJankenSessionHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserJankenSessionHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserJankenSessionHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dao: no UserJankenSessionHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userJankenSessionHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"user_janken_session_histories\" WHERE \"game_session_id\"=$1 AND \"turn\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete from user_janken_session_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by delete for user_janken_session_histories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userJankenSessionHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dao: no userJankenSessionHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from user_janken_session_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for user_janken_session_histories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserJankenSessionHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userJankenSessionHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userJankenSessionHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_janken_session_histories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userJankenSessionHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from userJankenSessionHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for user_janken_session_histories")
	}

	if len(userJankenSessionHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserJankenSessionHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserJankenSessionHistory(ctx, exec, o.GameSessionID, o.Turn)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserJankenSessionHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserJankenSessionHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userJankenSessionHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_janken_session_histories\".* FROM \"user_janken_session_histories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userJankenSessionHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dao: unable to reload all in UserJankenSessionHistorySlice")
	}

	*o = slice

	return nil
}

// UserJankenSessionHistoryExists checks if the UserJankenSessionHistory row exists.
func UserJankenSessionHistoryExists(ctx context.Context, exec boil.ContextExecutor, gameSessionID string, turn int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_janken_session_histories\" where \"game_session_id\"=$1 AND \"turn\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, gameSessionID, turn)
	}
	row := exec.QueryRowContext(ctx, sql, gameSessionID, turn)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dao: unable to check if user_janken_session_histories exists")
	}

	return exists, nil
}

// Exists checks if the UserJankenSessionHistory row exists.
func (o *UserJankenSessionHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserJankenSessionHistoryExists(ctx, exec, o.GameSessionID, o.Turn)
}

// /////////////////////////////// BEGIN EXTENSIONS /////////////////////////////////
// Expose table columns
var (
	UserJankenSessionHistoryAllColumns            = userJankenSessionHistoryAllColumns
	UserJankenSessionHistoryColumnsWithoutDefault = userJankenSessionHistoryColumnsWithoutDefault
	UserJankenSessionHistoryColumnsWithDefault    = userJankenSessionHistoryColumnsWithDefault
	UserJankenSessionHistoryPrimaryKeyColumns     = userJankenSessionHistoryPrimaryKeyColumns
	UserJankenSessionHistoryGeneratedColumns      = userJankenSessionHistoryGeneratedColumns
)

// InsertAll inserts all rows with the specified column values, using an executor.
func (o UserJankenSessionHistorySlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		wl, _ := columns.InsertColumnSet(
			userJankenSessionHistoryAllColumns,
			userJankenSessionHistoryColumnsWithDefault,
			userJankenSessionHistoryColumnsWithoutDefault,
			queries.NonZeroDefaultSet(userJankenSessionHistoryColumnsWithDefault, row),
		)
		if i == 0 {
			sql = "INSERT INTO \"user_janken_session_histories\" " + "(\"" + strings.Join(wl, "\",\"") + "\")" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(userJankenSessionHistoryType, userJankenSessionHistoryMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to insert all from userJankenSessionHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by insertall for user_janken_session_histories")
	}

	if len(userJankenSessionHistoryAfterInsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterInsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// UpsertAll inserts or updates all rows
// Currently it doesn't support "NoContext" and "NoRowsAffected"
func (o UserJankenSessionHistorySlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	nzDefaults := queries.NonZeroDefaultSet(userJankenSessionHistoryColumnsWithDefault, o[0])

	insert, _ := insertColumns.InsertColumnSet(
		userJankenSessionHistoryAllColumns,
		userJankenSessionHistoryColumnsWithDefault,
		userJankenSessionHistoryColumnsWithoutDefault,
		nzDefaults,
	)
	update := updateColumns.UpdateColumnSet(
		userJankenSessionHistoryAllColumns,
		userJankenSessionHistoryPrimaryKeyColumns,
	)

	if updateOnConflict && len(update) == 0 {
		return 0, errors.New("dao: unable to upsert user_janken_session_histories, could not build update column list")
	}

	conflict := conflictColumns
	if len(conflict) == 0 {
		conflict = make([]string, len(userJankenSessionHistoryPrimaryKeyColumns))
		copy(conflict, userJankenSessionHistoryPrimaryKeyColumns)
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	columns := "DEFAULT VALUES"
	if len(insert) != 0 {
		columns = fmt.Sprintf("(%s) VALUES %s",
			strings.Join(insert, ", "),
			strmangle.Placeholders(dialect.UseIndexPlaceholders, len(insert)*len(o), 1, len(insert)),
		)
	}

	fmt.Fprintf(
		buf,
		"INSERT INTO %s %s ON CONFLICT ",
		"\"user_janken_session_histories\"",
		columns,
	)

	if !updateOnConflict || len(update) == 0 {
		buf.WriteString("DO NOTHING")
	} else {
		buf.WriteByte('(')
		buf.WriteString(strings.Join(conflict, ", "))
		buf.WriteString(") DO UPDATE SET ")

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = EXCLUDED.")
			buf.WriteString(quoted)
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(userJankenSessionHistoryType, userJankenSessionHistoryMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}

			row.UpdatedAt = currTime
		}

		if err := row.doBeforeUpsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to upsert for user_janken_session_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by upsert for user_janken_session_histories")
	}

	if len(userJankenSessionHistoryAfterUpsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterUpsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

///////////////////////////////// END EXTENSIONS /////////////////////////////////
