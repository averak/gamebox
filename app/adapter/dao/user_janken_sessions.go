// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserJankenSession is an object representing the database table.
type UserJankenSession struct {
	GameSessionID string    `boil:"game_session_id" json:"game_session_id" toml:"game_session_id" yaml:"game_session_id"`
	Seed          int       `boil:"seed" json:"seed" toml:"seed" yaml:"seed"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userJankenSessionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userJankenSessionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserJankenSessionColumns = struct {
	GameSessionID string
	Seed          string
	CreatedAt     string
	UpdatedAt     string
}{
	GameSessionID: "game_session_id",
	Seed:          "seed",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var UserJankenSessionTableColumns = struct {
	GameSessionID string
	Seed          string
	CreatedAt     string
	UpdatedAt     string
}{
	GameSessionID: "user_janken_sessions.game_session_id",
	Seed:          "user_janken_sessions.seed",
	CreatedAt:     "user_janken_sessions.created_at",
	UpdatedAt:     "user_janken_sessions.updated_at",
}

// Generated where

var UserJankenSessionWhere = struct {
	GameSessionID whereHelperstring
	Seed          whereHelperint
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	GameSessionID: whereHelperstring{field: "\"user_janken_sessions\".\"game_session_id\""},
	Seed:          whereHelperint{field: "\"user_janken_sessions\".\"seed\""},
	CreatedAt:     whereHelpertime_Time{field: "\"user_janken_sessions\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"user_janken_sessions\".\"updated_at\""},
}

// UserJankenSessionRels is where relationship names are stored.
var UserJankenSessionRels = struct {
	GameSession                           string
	GameSessionUserJankenSessionHistories string
}{
	GameSession:                           "GameSession",
	GameSessionUserJankenSessionHistories: "GameSessionUserJankenSessionHistories",
}

// userJankenSessionR is where relationships are stored.
type userJankenSessionR struct {
	GameSession                           *UserGameSession              `boil:"GameSession" json:"GameSession" toml:"GameSession" yaml:"GameSession"`
	GameSessionUserJankenSessionHistories UserJankenSessionHistorySlice `boil:"GameSessionUserJankenSessionHistories" json:"GameSessionUserJankenSessionHistories" toml:"GameSessionUserJankenSessionHistories" yaml:"GameSessionUserJankenSessionHistories"`
}

// NewStruct creates a new relationship struct
func (*userJankenSessionR) NewStruct() *userJankenSessionR {
	return &userJankenSessionR{}
}

func (r *userJankenSessionR) GetGameSession() *UserGameSession {
	if r == nil {
		return nil
	}
	return r.GameSession
}

func (r *userJankenSessionR) GetGameSessionUserJankenSessionHistories() UserJankenSessionHistorySlice {
	if r == nil {
		return nil
	}
	return r.GameSessionUserJankenSessionHistories
}

// userJankenSessionL is where Load methods for each relationship are stored.
type userJankenSessionL struct{}

var (
	userJankenSessionAllColumns            = []string{"game_session_id", "seed", "created_at", "updated_at"}
	userJankenSessionColumnsWithoutDefault = []string{"game_session_id", "seed", "created_at", "updated_at"}
	userJankenSessionColumnsWithDefault    = []string{}
	userJankenSessionPrimaryKeyColumns     = []string{"game_session_id"}
	userJankenSessionGeneratedColumns      = []string{}
)

type (
	// UserJankenSessionSlice is an alias for a slice of pointers to UserJankenSession.
	// This should almost always be used instead of []UserJankenSession.
	UserJankenSessionSlice []*UserJankenSession
	// UserJankenSessionHook is the signature for custom UserJankenSession hook methods
	UserJankenSessionHook func(context.Context, boil.ContextExecutor, *UserJankenSession) error

	userJankenSessionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userJankenSessionType                 = reflect.TypeOf(&UserJankenSession{})
	userJankenSessionMapping              = queries.MakeStructMapping(userJankenSessionType)
	userJankenSessionPrimaryKeyMapping, _ = queries.BindMapping(userJankenSessionType, userJankenSessionMapping, userJankenSessionPrimaryKeyColumns)
	userJankenSessionInsertCacheMut       sync.RWMutex
	userJankenSessionInsertCache          = make(map[string]insertCache)
	userJankenSessionUpdateCacheMut       sync.RWMutex
	userJankenSessionUpdateCache          = make(map[string]updateCache)
	userJankenSessionUpsertCacheMut       sync.RWMutex
	userJankenSessionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userJankenSessionAfterSelectMu sync.Mutex
var userJankenSessionAfterSelectHooks []UserJankenSessionHook

var userJankenSessionBeforeInsertMu sync.Mutex
var userJankenSessionBeforeInsertHooks []UserJankenSessionHook
var userJankenSessionAfterInsertMu sync.Mutex
var userJankenSessionAfterInsertHooks []UserJankenSessionHook

var userJankenSessionBeforeUpdateMu sync.Mutex
var userJankenSessionBeforeUpdateHooks []UserJankenSessionHook
var userJankenSessionAfterUpdateMu sync.Mutex
var userJankenSessionAfterUpdateHooks []UserJankenSessionHook

var userJankenSessionBeforeDeleteMu sync.Mutex
var userJankenSessionBeforeDeleteHooks []UserJankenSessionHook
var userJankenSessionAfterDeleteMu sync.Mutex
var userJankenSessionAfterDeleteHooks []UserJankenSessionHook

var userJankenSessionBeforeUpsertMu sync.Mutex
var userJankenSessionBeforeUpsertHooks []UserJankenSessionHook
var userJankenSessionAfterUpsertMu sync.Mutex
var userJankenSessionAfterUpsertHooks []UserJankenSessionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserJankenSession) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserJankenSession) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserJankenSession) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserJankenSession) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserJankenSession) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserJankenSession) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserJankenSession) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserJankenSession) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserJankenSession) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userJankenSessionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserJankenSessionHook registers your hook function for all future operations.
func AddUserJankenSessionHook(hookPoint boil.HookPoint, userJankenSessionHook UserJankenSessionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userJankenSessionAfterSelectMu.Lock()
		userJankenSessionAfterSelectHooks = append(userJankenSessionAfterSelectHooks, userJankenSessionHook)
		userJankenSessionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userJankenSessionBeforeInsertMu.Lock()
		userJankenSessionBeforeInsertHooks = append(userJankenSessionBeforeInsertHooks, userJankenSessionHook)
		userJankenSessionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userJankenSessionAfterInsertMu.Lock()
		userJankenSessionAfterInsertHooks = append(userJankenSessionAfterInsertHooks, userJankenSessionHook)
		userJankenSessionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userJankenSessionBeforeUpdateMu.Lock()
		userJankenSessionBeforeUpdateHooks = append(userJankenSessionBeforeUpdateHooks, userJankenSessionHook)
		userJankenSessionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userJankenSessionAfterUpdateMu.Lock()
		userJankenSessionAfterUpdateHooks = append(userJankenSessionAfterUpdateHooks, userJankenSessionHook)
		userJankenSessionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userJankenSessionBeforeDeleteMu.Lock()
		userJankenSessionBeforeDeleteHooks = append(userJankenSessionBeforeDeleteHooks, userJankenSessionHook)
		userJankenSessionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userJankenSessionAfterDeleteMu.Lock()
		userJankenSessionAfterDeleteHooks = append(userJankenSessionAfterDeleteHooks, userJankenSessionHook)
		userJankenSessionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userJankenSessionBeforeUpsertMu.Lock()
		userJankenSessionBeforeUpsertHooks = append(userJankenSessionBeforeUpsertHooks, userJankenSessionHook)
		userJankenSessionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userJankenSessionAfterUpsertMu.Lock()
		userJankenSessionAfterUpsertHooks = append(userJankenSessionAfterUpsertHooks, userJankenSessionHook)
		userJankenSessionAfterUpsertMu.Unlock()
	}
}

// One returns a single userJankenSession record from the query.
func (q userJankenSessionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserJankenSession, error) {
	o := &UserJankenSession{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: failed to execute a one query for user_janken_sessions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserJankenSession records from the query.
func (q userJankenSessionQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserJankenSessionSlice, error) {
	var o []*UserJankenSession

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dao: failed to assign all query results to UserJankenSession slice")
	}

	if len(userJankenSessionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserJankenSession records in the query.
func (q userJankenSessionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to count user_janken_sessions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userJankenSessionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dao: failed to check if user_janken_sessions exists")
	}

	return count > 0, nil
}

// GameSession pointed to by the foreign key.
func (o *UserJankenSession) GameSession(mods ...qm.QueryMod) userGameSessionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GameSessionID),
	}

	queryMods = append(queryMods, mods...)

	return UserGameSessions(queryMods...)
}

// GameSessionUserJankenSessionHistories retrieves all the user_janken_session_history's UserJankenSessionHistories with an executor via game_session_id column.
func (o *UserJankenSession) GameSessionUserJankenSessionHistories(mods ...qm.QueryMod) userJankenSessionHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_janken_session_histories\".\"game_session_id\"=?", o.GameSessionID),
	)

	return UserJankenSessionHistories(queryMods...)
}

// LoadGameSession allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userJankenSessionL) LoadGameSession(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserJankenSession interface{}, mods queries.Applicator) error {
	var slice []*UserJankenSession
	var object *UserJankenSession

	if singular {
		var ok bool
		object, ok = maybeUserJankenSession.(*UserJankenSession)
		if !ok {
			object = new(UserJankenSession)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserJankenSession)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserJankenSession))
			}
		}
	} else {
		s, ok := maybeUserJankenSession.(*[]*UserJankenSession)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserJankenSession)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserJankenSession))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userJankenSessionR{}
		}
		args[object.GameSessionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userJankenSessionR{}
			}

			args[obj.GameSessionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_game_sessions`),
		qm.WhereIn(`user_game_sessions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserGameSession")
	}

	var resultSlice []*UserGameSession
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserGameSession")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_game_sessions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_game_sessions")
	}

	if len(userGameSessionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GameSession = foreign
		if foreign.R == nil {
			foreign.R = &userGameSessionR{}
		}
		foreign.R.GameSessionUserJankenSession = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameSessionID == foreign.ID {
				local.R.GameSession = foreign
				if foreign.R == nil {
					foreign.R = &userGameSessionR{}
				}
				foreign.R.GameSessionUserJankenSession = local
				break
			}
		}
	}

	return nil
}

// LoadGameSessionUserJankenSessionHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userJankenSessionL) LoadGameSessionUserJankenSessionHistories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserJankenSession interface{}, mods queries.Applicator) error {
	var slice []*UserJankenSession
	var object *UserJankenSession

	if singular {
		var ok bool
		object, ok = maybeUserJankenSession.(*UserJankenSession)
		if !ok {
			object = new(UserJankenSession)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserJankenSession)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserJankenSession))
			}
		}
	} else {
		s, ok := maybeUserJankenSession.(*[]*UserJankenSession)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserJankenSession)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserJankenSession))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userJankenSessionR{}
		}
		args[object.GameSessionID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userJankenSessionR{}
			}
			args[obj.GameSessionID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_janken_session_histories`),
		qm.WhereIn(`user_janken_session_histories.game_session_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_janken_session_histories")
	}

	var resultSlice []*UserJankenSessionHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_janken_session_histories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_janken_session_histories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_janken_session_histories")
	}

	if len(userJankenSessionHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GameSessionUserJankenSessionHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userJankenSessionHistoryR{}
			}
			foreign.R.GameSession = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GameSessionID == foreign.GameSessionID {
				local.R.GameSessionUserJankenSessionHistories = append(local.R.GameSessionUserJankenSessionHistories, foreign)
				if foreign.R == nil {
					foreign.R = &userJankenSessionHistoryR{}
				}
				foreign.R.GameSession = local
				break
			}
		}
	}

	return nil
}

// SetGameSession of the userJankenSession to the related item.
// Sets o.R.GameSession to related.
// Adds o to related.R.GameSessionUserJankenSession.
func (o *UserJankenSession) SetGameSession(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserGameSession) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_janken_sessions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_session_id"}),
		strmangle.WhereClause("\"", "\"", 2, userJankenSessionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.GameSessionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameSessionID = related.ID
	if o.R == nil {
		o.R = &userJankenSessionR{
			GameSession: related,
		}
	} else {
		o.R.GameSession = related
	}

	if related.R == nil {
		related.R = &userGameSessionR{
			GameSessionUserJankenSession: o,
		}
	} else {
		related.R.GameSessionUserJankenSession = o
	}

	return nil
}

// AddGameSessionUserJankenSessionHistories adds the given related objects to the existing relationships
// of the user_janken_session, optionally inserting them as new records.
// Appends related to o.R.GameSessionUserJankenSessionHistories.
// Sets related.R.GameSession appropriately.
func (o *UserJankenSession) AddGameSessionUserJankenSessionHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserJankenSessionHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GameSessionID = o.GameSessionID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_janken_session_histories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"game_session_id"}),
				strmangle.WhereClause("\"", "\"", 2, userJankenSessionHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.GameSessionID, rel.GameSessionID, rel.Turn}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GameSessionID = o.GameSessionID
		}
	}

	if o.R == nil {
		o.R = &userJankenSessionR{
			GameSessionUserJankenSessionHistories: related,
		}
	} else {
		o.R.GameSessionUserJankenSessionHistories = append(o.R.GameSessionUserJankenSessionHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userJankenSessionHistoryR{
				GameSession: o,
			}
		} else {
			rel.R.GameSession = o
		}
	}
	return nil
}

// UserJankenSessions retrieves all the records using an executor.
func UserJankenSessions(mods ...qm.QueryMod) userJankenSessionQuery {
	mods = append(mods, qm.From("\"user_janken_sessions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_janken_sessions\".*"})
	}

	return userJankenSessionQuery{q}
}

// FindUserJankenSession retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserJankenSession(ctx context.Context, exec boil.ContextExecutor, gameSessionID string, selectCols ...string) (*UserJankenSession, error) {
	userJankenSessionObj := &UserJankenSession{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_janken_sessions\" where \"game_session_id\"=$1", sel,
	)

	q := queries.Raw(query, gameSessionID)

	err := q.Bind(ctx, exec, userJankenSessionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: unable to select from user_janken_sessions")
	}

	if err = userJankenSessionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userJankenSessionObj, err
	}

	return userJankenSessionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserJankenSession) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no user_janken_sessions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userJankenSessionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userJankenSessionInsertCacheMut.RLock()
	cache, cached := userJankenSessionInsertCache[key]
	userJankenSessionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userJankenSessionAllColumns,
			userJankenSessionColumnsWithDefault,
			userJankenSessionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userJankenSessionType, userJankenSessionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userJankenSessionType, userJankenSessionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_janken_sessions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_janken_sessions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dao: unable to insert into user_janken_sessions")
	}

	if !cached {
		userJankenSessionInsertCacheMut.Lock()
		userJankenSessionInsertCache[key] = cache
		userJankenSessionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserJankenSession.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserJankenSession) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userJankenSessionUpdateCacheMut.RLock()
	cache, cached := userJankenSessionUpdateCache[key]
	userJankenSessionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userJankenSessionAllColumns,
			userJankenSessionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dao: unable to update user_janken_sessions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_janken_sessions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userJankenSessionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userJankenSessionType, userJankenSessionMapping, append(wl, userJankenSessionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update user_janken_sessions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by update for user_janken_sessions")
	}

	if !cached {
		userJankenSessionUpdateCacheMut.Lock()
		userJankenSessionUpdateCache[key] = cache
		userJankenSessionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userJankenSessionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all for user_janken_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected for user_janken_sessions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserJankenSessionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dao: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userJankenSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_janken_sessions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userJankenSessionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all in userJankenSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected all in update all userJankenSession")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserJankenSession) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dao: no user_janken_sessions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userJankenSessionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userJankenSessionUpsertCacheMut.RLock()
	cache, cached := userJankenSessionUpsertCache[key]
	userJankenSessionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userJankenSessionAllColumns,
			userJankenSessionColumnsWithDefault,
			userJankenSessionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userJankenSessionAllColumns,
			userJankenSessionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dao: unable to upsert user_janken_sessions, could not build update column list")
		}

		ret := strmangle.SetComplement(userJankenSessionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userJankenSessionPrimaryKeyColumns) == 0 {
				return errors.New("dao: unable to upsert user_janken_sessions, could not build conflict column list")
			}

			conflict = make([]string, len(userJankenSessionPrimaryKeyColumns))
			copy(conflict, userJankenSessionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_janken_sessions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userJankenSessionType, userJankenSessionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userJankenSessionType, userJankenSessionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dao: unable to upsert user_janken_sessions")
	}

	if !cached {
		userJankenSessionUpsertCacheMut.Lock()
		userJankenSessionUpsertCache[key] = cache
		userJankenSessionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserJankenSession record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserJankenSession) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dao: no UserJankenSession provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userJankenSessionPrimaryKeyMapping)
	sql := "DELETE FROM \"user_janken_sessions\" WHERE \"game_session_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete from user_janken_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by delete for user_janken_sessions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userJankenSessionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dao: no userJankenSessionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from user_janken_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for user_janken_sessions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserJankenSessionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userJankenSessionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userJankenSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_janken_sessions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userJankenSessionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from userJankenSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for user_janken_sessions")
	}

	if len(userJankenSessionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserJankenSession) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserJankenSession(ctx, exec, o.GameSessionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserJankenSessionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserJankenSessionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userJankenSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_janken_sessions\".* FROM \"user_janken_sessions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userJankenSessionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dao: unable to reload all in UserJankenSessionSlice")
	}

	*o = slice

	return nil
}

// UserJankenSessionExists checks if the UserJankenSession row exists.
func UserJankenSessionExists(ctx context.Context, exec boil.ContextExecutor, gameSessionID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_janken_sessions\" where \"game_session_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, gameSessionID)
	}
	row := exec.QueryRowContext(ctx, sql, gameSessionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dao: unable to check if user_janken_sessions exists")
	}

	return exists, nil
}

// Exists checks if the UserJankenSession row exists.
func (o *UserJankenSession) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserJankenSessionExists(ctx, exec, o.GameSessionID)
}

// /////////////////////////////// BEGIN EXTENSIONS /////////////////////////////////
// Expose table columns
var (
	UserJankenSessionAllColumns            = userJankenSessionAllColumns
	UserJankenSessionColumnsWithoutDefault = userJankenSessionColumnsWithoutDefault
	UserJankenSessionColumnsWithDefault    = userJankenSessionColumnsWithDefault
	UserJankenSessionPrimaryKeyColumns     = userJankenSessionPrimaryKeyColumns
	UserJankenSessionGeneratedColumns      = userJankenSessionGeneratedColumns
)

// InsertAll inserts all rows with the specified column values, using an executor.
func (o UserJankenSessionSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		wl, _ := columns.InsertColumnSet(
			userJankenSessionAllColumns,
			userJankenSessionColumnsWithDefault,
			userJankenSessionColumnsWithoutDefault,
			queries.NonZeroDefaultSet(userJankenSessionColumnsWithDefault, row),
		)
		if i == 0 {
			sql = "INSERT INTO \"user_janken_sessions\" " + "(\"" + strings.Join(wl, "\",\"") + "\")" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(userJankenSessionType, userJankenSessionMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to insert all from userJankenSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by insertall for user_janken_sessions")
	}

	if len(userJankenSessionAfterInsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterInsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// UpsertAll inserts or updates all rows
// Currently it doesn't support "NoContext" and "NoRowsAffected"
func (o UserJankenSessionSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	nzDefaults := queries.NonZeroDefaultSet(userJankenSessionColumnsWithDefault, o[0])

	insert, _ := insertColumns.InsertColumnSet(
		userJankenSessionAllColumns,
		userJankenSessionColumnsWithDefault,
		userJankenSessionColumnsWithoutDefault,
		nzDefaults,
	)
	update := updateColumns.UpdateColumnSet(
		userJankenSessionAllColumns,
		userJankenSessionPrimaryKeyColumns,
	)

	if updateOnConflict && len(update) == 0 {
		return 0, errors.New("dao: unable to upsert user_janken_sessions, could not build update column list")
	}

	conflict := conflictColumns
	if len(conflict) == 0 {
		conflict = make([]string, len(userJankenSessionPrimaryKeyColumns))
		copy(conflict, userJankenSessionPrimaryKeyColumns)
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	columns := "DEFAULT VALUES"
	if len(insert) != 0 {
		columns = fmt.Sprintf("(%s) VALUES %s",
			strings.Join(insert, ", "),
			strmangle.Placeholders(dialect.UseIndexPlaceholders, len(insert)*len(o), 1, len(insert)),
		)
	}

	fmt.Fprintf(
		buf,
		"INSERT INTO %s %s ON CONFLICT ",
		"\"user_janken_sessions\"",
		columns,
	)

	if !updateOnConflict || len(update) == 0 {
		buf.WriteString("DO NOTHING")
	} else {
		buf.WriteByte('(')
		buf.WriteString(strings.Join(conflict, ", "))
		buf.WriteString(") DO UPDATE SET ")

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = EXCLUDED.")
			buf.WriteString(quoted)
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(userJankenSessionType, userJankenSessionMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}

			row.UpdatedAt = currTime
		}

		if err := row.doBeforeUpsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to upsert for user_janken_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by upsert for user_janken_sessions")
	}

	if len(userJankenSessionAfterUpsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterUpsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

///////////////////////////////// END EXTENSIONS /////////////////////////////////
