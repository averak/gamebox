// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserGameSession is an object representing the database table.
type UserGameSession struct {
	ID         string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID     string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	GameID     int       `boil:"game_id" json:"game_id" toml:"game_id" yaml:"game_id"`
	Status     int       `boil:"status" json:"status" toml:"status" yaml:"status"`
	Result     int       `boil:"result" json:"result" toml:"result" yaml:"result"`
	Wager      int       `boil:"wager" json:"wager" toml:"wager" yaml:"wager"`
	Payout     int       `boil:"payout" json:"payout" toml:"payout" yaml:"payout"`
	StartedAt  time.Time `boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	FinishedAt null.Time `boil:"finished_at" json:"finished_at,omitempty" toml:"finished_at" yaml:"finished_at,omitempty"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userGameSessionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userGameSessionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserGameSessionColumns = struct {
	ID         string
	UserID     string
	GameID     string
	Status     string
	Result     string
	Wager      string
	Payout     string
	StartedAt  string
	FinishedAt string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	UserID:     "user_id",
	GameID:     "game_id",
	Status:     "status",
	Result:     "result",
	Wager:      "wager",
	Payout:     "payout",
	StartedAt:  "started_at",
	FinishedAt: "finished_at",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var UserGameSessionTableColumns = struct {
	ID         string
	UserID     string
	GameID     string
	Status     string
	Result     string
	Wager      string
	Payout     string
	StartedAt  string
	FinishedAt string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "user_game_sessions.id",
	UserID:     "user_game_sessions.user_id",
	GameID:     "user_game_sessions.game_id",
	Status:     "user_game_sessions.status",
	Result:     "user_game_sessions.result",
	Wager:      "user_game_sessions.wager",
	Payout:     "user_game_sessions.payout",
	StartedAt:  "user_game_sessions.started_at",
	FinishedAt: "user_game_sessions.finished_at",
	CreatedAt:  "user_game_sessions.created_at",
	UpdatedAt:  "user_game_sessions.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var UserGameSessionWhere = struct {
	ID         whereHelperstring
	UserID     whereHelperstring
	GameID     whereHelperint
	Status     whereHelperint
	Result     whereHelperint
	Wager      whereHelperint
	Payout     whereHelperint
	StartedAt  whereHelpertime_Time
	FinishedAt whereHelpernull_Time
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"user_game_sessions\".\"id\""},
	UserID:     whereHelperstring{field: "\"user_game_sessions\".\"user_id\""},
	GameID:     whereHelperint{field: "\"user_game_sessions\".\"game_id\""},
	Status:     whereHelperint{field: "\"user_game_sessions\".\"status\""},
	Result:     whereHelperint{field: "\"user_game_sessions\".\"result\""},
	Wager:      whereHelperint{field: "\"user_game_sessions\".\"wager\""},
	Payout:     whereHelperint{field: "\"user_game_sessions\".\"payout\""},
	StartedAt:  whereHelpertime_Time{field: "\"user_game_sessions\".\"started_at\""},
	FinishedAt: whereHelpernull_Time{field: "\"user_game_sessions\".\"finished_at\""},
	CreatedAt:  whereHelpertime_Time{field: "\"user_game_sessions\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"user_game_sessions\".\"updated_at\""},
}

// UserGameSessionRels is where relationship names are stored.
var UserGameSessionRels = struct {
	User string
}{
	User: "User",
}

// userGameSessionR is where relationships are stored.
type userGameSessionR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userGameSessionR) NewStruct() *userGameSessionR {
	return &userGameSessionR{}
}

func (r *userGameSessionR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userGameSessionL is where Load methods for each relationship are stored.
type userGameSessionL struct{}

var (
	userGameSessionAllColumns            = []string{"id", "user_id", "game_id", "status", "result", "wager", "payout", "started_at", "finished_at", "created_at", "updated_at"}
	userGameSessionColumnsWithoutDefault = []string{"id", "user_id", "game_id", "status", "result", "wager", "payout", "started_at", "created_at", "updated_at"}
	userGameSessionColumnsWithDefault    = []string{"finished_at"}
	userGameSessionPrimaryKeyColumns     = []string{"id"}
	userGameSessionGeneratedColumns      = []string{}
)

type (
	// UserGameSessionSlice is an alias for a slice of pointers to UserGameSession.
	// This should almost always be used instead of []UserGameSession.
	UserGameSessionSlice []*UserGameSession
	// UserGameSessionHook is the signature for custom UserGameSession hook methods
	UserGameSessionHook func(context.Context, boil.ContextExecutor, *UserGameSession) error

	userGameSessionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userGameSessionType                 = reflect.TypeOf(&UserGameSession{})
	userGameSessionMapping              = queries.MakeStructMapping(userGameSessionType)
	userGameSessionPrimaryKeyMapping, _ = queries.BindMapping(userGameSessionType, userGameSessionMapping, userGameSessionPrimaryKeyColumns)
	userGameSessionInsertCacheMut       sync.RWMutex
	userGameSessionInsertCache          = make(map[string]insertCache)
	userGameSessionUpdateCacheMut       sync.RWMutex
	userGameSessionUpdateCache          = make(map[string]updateCache)
	userGameSessionUpsertCacheMut       sync.RWMutex
	userGameSessionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userGameSessionAfterSelectMu sync.Mutex
var userGameSessionAfterSelectHooks []UserGameSessionHook

var userGameSessionBeforeInsertMu sync.Mutex
var userGameSessionBeforeInsertHooks []UserGameSessionHook
var userGameSessionAfterInsertMu sync.Mutex
var userGameSessionAfterInsertHooks []UserGameSessionHook

var userGameSessionBeforeUpdateMu sync.Mutex
var userGameSessionBeforeUpdateHooks []UserGameSessionHook
var userGameSessionAfterUpdateMu sync.Mutex
var userGameSessionAfterUpdateHooks []UserGameSessionHook

var userGameSessionBeforeDeleteMu sync.Mutex
var userGameSessionBeforeDeleteHooks []UserGameSessionHook
var userGameSessionAfterDeleteMu sync.Mutex
var userGameSessionAfterDeleteHooks []UserGameSessionHook

var userGameSessionBeforeUpsertMu sync.Mutex
var userGameSessionBeforeUpsertHooks []UserGameSessionHook
var userGameSessionAfterUpsertMu sync.Mutex
var userGameSessionAfterUpsertHooks []UserGameSessionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserGameSession) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userGameSessionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserGameSession) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userGameSessionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserGameSession) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userGameSessionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserGameSession) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userGameSessionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserGameSession) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userGameSessionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserGameSession) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userGameSessionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserGameSession) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userGameSessionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserGameSession) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userGameSessionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserGameSession) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userGameSessionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserGameSessionHook registers your hook function for all future operations.
func AddUserGameSessionHook(hookPoint boil.HookPoint, userGameSessionHook UserGameSessionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userGameSessionAfterSelectMu.Lock()
		userGameSessionAfterSelectHooks = append(userGameSessionAfterSelectHooks, userGameSessionHook)
		userGameSessionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userGameSessionBeforeInsertMu.Lock()
		userGameSessionBeforeInsertHooks = append(userGameSessionBeforeInsertHooks, userGameSessionHook)
		userGameSessionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userGameSessionAfterInsertMu.Lock()
		userGameSessionAfterInsertHooks = append(userGameSessionAfterInsertHooks, userGameSessionHook)
		userGameSessionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userGameSessionBeforeUpdateMu.Lock()
		userGameSessionBeforeUpdateHooks = append(userGameSessionBeforeUpdateHooks, userGameSessionHook)
		userGameSessionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userGameSessionAfterUpdateMu.Lock()
		userGameSessionAfterUpdateHooks = append(userGameSessionAfterUpdateHooks, userGameSessionHook)
		userGameSessionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userGameSessionBeforeDeleteMu.Lock()
		userGameSessionBeforeDeleteHooks = append(userGameSessionBeforeDeleteHooks, userGameSessionHook)
		userGameSessionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userGameSessionAfterDeleteMu.Lock()
		userGameSessionAfterDeleteHooks = append(userGameSessionAfterDeleteHooks, userGameSessionHook)
		userGameSessionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userGameSessionBeforeUpsertMu.Lock()
		userGameSessionBeforeUpsertHooks = append(userGameSessionBeforeUpsertHooks, userGameSessionHook)
		userGameSessionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userGameSessionAfterUpsertMu.Lock()
		userGameSessionAfterUpsertHooks = append(userGameSessionAfterUpsertHooks, userGameSessionHook)
		userGameSessionAfterUpsertMu.Unlock()
	}
}

// One returns a single userGameSession record from the query.
func (q userGameSessionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserGameSession, error) {
	o := &UserGameSession{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: failed to execute a one query for user_game_sessions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserGameSession records from the query.
func (q userGameSessionQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserGameSessionSlice, error) {
	var o []*UserGameSession

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dao: failed to assign all query results to UserGameSession slice")
	}

	if len(userGameSessionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserGameSession records in the query.
func (q userGameSessionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to count user_game_sessions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userGameSessionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dao: failed to check if user_game_sessions exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserGameSession) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userGameSessionL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserGameSession interface{}, mods queries.Applicator) error {
	var slice []*UserGameSession
	var object *UserGameSession

	if singular {
		var ok bool
		object, ok = maybeUserGameSession.(*UserGameSession)
		if !ok {
			object = new(UserGameSession)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserGameSession)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserGameSession))
			}
		}
	} else {
		s, ok := maybeUserGameSession.(*[]*UserGameSession)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserGameSession)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserGameSession))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userGameSessionR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userGameSessionR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserGameSessions = append(foreign.R.UserGameSessions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserGameSessions = append(foreign.R.UserGameSessions, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the userGameSession to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserGameSessions.
func (o *UserGameSession) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_game_sessions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userGameSessionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userGameSessionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserGameSessions: UserGameSessionSlice{o},
		}
	} else {
		related.R.UserGameSessions = append(related.R.UserGameSessions, o)
	}

	return nil
}

// UserGameSessions retrieves all the records using an executor.
func UserGameSessions(mods ...qm.QueryMod) userGameSessionQuery {
	mods = append(mods, qm.From("\"user_game_sessions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_game_sessions\".*"})
	}

	return userGameSessionQuery{q}
}

// FindUserGameSession retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserGameSession(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UserGameSession, error) {
	userGameSessionObj := &UserGameSession{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_game_sessions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userGameSessionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dao: unable to select from user_game_sessions")
	}

	if err = userGameSessionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userGameSessionObj, err
	}

	return userGameSessionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserGameSession) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dao: no user_game_sessions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userGameSessionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userGameSessionInsertCacheMut.RLock()
	cache, cached := userGameSessionInsertCache[key]
	userGameSessionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userGameSessionAllColumns,
			userGameSessionColumnsWithDefault,
			userGameSessionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userGameSessionType, userGameSessionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userGameSessionType, userGameSessionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_game_sessions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_game_sessions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dao: unable to insert into user_game_sessions")
	}

	if !cached {
		userGameSessionInsertCacheMut.Lock()
		userGameSessionInsertCache[key] = cache
		userGameSessionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserGameSession.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserGameSession) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userGameSessionUpdateCacheMut.RLock()
	cache, cached := userGameSessionUpdateCache[key]
	userGameSessionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userGameSessionAllColumns,
			userGameSessionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dao: unable to update user_game_sessions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_game_sessions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userGameSessionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userGameSessionType, userGameSessionMapping, append(wl, userGameSessionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update user_game_sessions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by update for user_game_sessions")
	}

	if !cached {
		userGameSessionUpdateCacheMut.Lock()
		userGameSessionUpdateCache[key] = cache
		userGameSessionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userGameSessionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all for user_game_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected for user_game_sessions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserGameSessionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dao: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userGameSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_game_sessions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userGameSessionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to update all in userGameSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to retrieve rows affected all in update all userGameSession")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserGameSession) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dao: no user_game_sessions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userGameSessionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userGameSessionUpsertCacheMut.RLock()
	cache, cached := userGameSessionUpsertCache[key]
	userGameSessionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userGameSessionAllColumns,
			userGameSessionColumnsWithDefault,
			userGameSessionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userGameSessionAllColumns,
			userGameSessionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dao: unable to upsert user_game_sessions, could not build update column list")
		}

		ret := strmangle.SetComplement(userGameSessionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userGameSessionPrimaryKeyColumns) == 0 {
				return errors.New("dao: unable to upsert user_game_sessions, could not build conflict column list")
			}

			conflict = make([]string, len(userGameSessionPrimaryKeyColumns))
			copy(conflict, userGameSessionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_game_sessions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userGameSessionType, userGameSessionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userGameSessionType, userGameSessionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dao: unable to upsert user_game_sessions")
	}

	if !cached {
		userGameSessionUpsertCacheMut.Lock()
		userGameSessionUpsertCache[key] = cache
		userGameSessionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserGameSession record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserGameSession) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dao: no UserGameSession provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userGameSessionPrimaryKeyMapping)
	sql := "DELETE FROM \"user_game_sessions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete from user_game_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by delete for user_game_sessions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userGameSessionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dao: no userGameSessionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from user_game_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for user_game_sessions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserGameSessionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userGameSessionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userGameSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_game_sessions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userGameSessionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to delete all from userGameSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by deleteall for user_game_sessions")
	}

	if len(userGameSessionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserGameSession) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserGameSession(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserGameSessionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserGameSessionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userGameSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_game_sessions\".* FROM \"user_game_sessions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userGameSessionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dao: unable to reload all in UserGameSessionSlice")
	}

	*o = slice

	return nil
}

// UserGameSessionExists checks if the UserGameSession row exists.
func UserGameSessionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_game_sessions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dao: unable to check if user_game_sessions exists")
	}

	return exists, nil
}

// Exists checks if the UserGameSession row exists.
func (o *UserGameSession) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserGameSessionExists(ctx, exec, o.ID)
}

// /////////////////////////////// BEGIN EXTENSIONS /////////////////////////////////
// Expose table columns
var (
	UserGameSessionAllColumns            = userGameSessionAllColumns
	UserGameSessionColumnsWithoutDefault = userGameSessionColumnsWithoutDefault
	UserGameSessionColumnsWithDefault    = userGameSessionColumnsWithDefault
	UserGameSessionPrimaryKeyColumns     = userGameSessionPrimaryKeyColumns
	UserGameSessionGeneratedColumns      = userGameSessionGeneratedColumns
)

// InsertAll inserts all rows with the specified column values, using an executor.
func (o UserGameSessionSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		wl, _ := columns.InsertColumnSet(
			userGameSessionAllColumns,
			userGameSessionColumnsWithDefault,
			userGameSessionColumnsWithoutDefault,
			queries.NonZeroDefaultSet(userGameSessionColumnsWithDefault, row),
		)
		if i == 0 {
			sql = "INSERT INTO \"user_game_sessions\" " + "(\"" + strings.Join(wl, "\",\"") + "\")" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(userGameSessionType, userGameSessionMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to insert all from userGameSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by insertall for user_game_sessions")
	}

	if len(userGameSessionAfterInsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterInsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// UpsertAll inserts or updates all rows
// Currently it doesn't support "NoContext" and "NoRowsAffected"
func (o UserGameSessionSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	nzDefaults := queries.NonZeroDefaultSet(userGameSessionColumnsWithDefault, o[0])

	insert, _ := insertColumns.InsertColumnSet(
		userGameSessionAllColumns,
		userGameSessionColumnsWithDefault,
		userGameSessionColumnsWithoutDefault,
		nzDefaults,
	)
	update := updateColumns.UpdateColumnSet(
		userGameSessionAllColumns,
		userGameSessionPrimaryKeyColumns,
	)

	if updateOnConflict && len(update) == 0 {
		return 0, errors.New("dao: unable to upsert user_game_sessions, could not build update column list")
	}

	conflict := conflictColumns
	if len(conflict) == 0 {
		conflict = make([]string, len(userGameSessionPrimaryKeyColumns))
		copy(conflict, userGameSessionPrimaryKeyColumns)
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	columns := "DEFAULT VALUES"
	if len(insert) != 0 {
		columns = fmt.Sprintf("(%s) VALUES %s",
			strings.Join(insert, ", "),
			strmangle.Placeholders(dialect.UseIndexPlaceholders, len(insert)*len(o), 1, len(insert)),
		)
	}

	fmt.Fprintf(
		buf,
		"INSERT INTO %s %s ON CONFLICT ",
		"\"user_game_sessions\"",
		columns,
	)

	if !updateOnConflict || len(update) == 0 {
		buf.WriteString("DO NOTHING")
	} else {
		buf.WriteByte('(')
		buf.WriteString(strings.Join(conflict, ", "))
		buf.WriteString(") DO UPDATE SET ")

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = EXCLUDED.")
			buf.WriteString(quoted)
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(userGameSessionType, userGameSessionMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}

			row.UpdatedAt = currTime
		}

		if err := row.doBeforeUpsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "dao: unable to upsert for user_game_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dao: failed to get rows affected by upsert for user_game_sessions")
	}

	if len(userGameSessionAfterUpsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterUpsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

///////////////////////////////// END EXTENSIONS /////////////////////////////////
