// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/janken.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/averak/gamebox/protobuf/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// JankenServiceName is the fully-qualified name of the JankenService service.
	JankenServiceName = "api.JankenService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JankenServiceChooseHandV1Procedure is the fully-qualified name of the JankenService's
	// ChooseHandV1 RPC.
	JankenServiceChooseHandV1Procedure = "/api.JankenService/ChooseHandV1"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	jankenServiceServiceDescriptor            = api.File_api_janken_proto.Services().ByName("JankenService")
	jankenServiceChooseHandV1MethodDescriptor = jankenServiceServiceDescriptor.Methods().ByName("ChooseHandV1")
)

// JankenServiceClient is a client for the api.JankenService service.
type JankenServiceClient interface {
	ChooseHandV1(context.Context, *connect.Request[api.JankenServiceChooseHandV1Request]) (*connect.Response[api.JankenServiceChooseHandV1Response], error)
}

// NewJankenServiceClient constructs a client for the api.JankenService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJankenServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JankenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &jankenServiceClient{
		chooseHandV1: connect.NewClient[api.JankenServiceChooseHandV1Request, api.JankenServiceChooseHandV1Response](
			httpClient,
			baseURL+JankenServiceChooseHandV1Procedure,
			connect.WithSchema(jankenServiceChooseHandV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// jankenServiceClient implements JankenServiceClient.
type jankenServiceClient struct {
	chooseHandV1 *connect.Client[api.JankenServiceChooseHandV1Request, api.JankenServiceChooseHandV1Response]
}

// ChooseHandV1 calls api.JankenService.ChooseHandV1.
func (c *jankenServiceClient) ChooseHandV1(ctx context.Context, req *connect.Request[api.JankenServiceChooseHandV1Request]) (*connect.Response[api.JankenServiceChooseHandV1Response], error) {
	return c.chooseHandV1.CallUnary(ctx, req)
}

// JankenServiceHandler is an implementation of the api.JankenService service.
type JankenServiceHandler interface {
	ChooseHandV1(context.Context, *connect.Request[api.JankenServiceChooseHandV1Request]) (*connect.Response[api.JankenServiceChooseHandV1Response], error)
}

// NewJankenServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJankenServiceHandler(svc JankenServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	jankenServiceChooseHandV1Handler := connect.NewUnaryHandler(
		JankenServiceChooseHandV1Procedure,
		svc.ChooseHandV1,
		connect.WithSchema(jankenServiceChooseHandV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.JankenService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JankenServiceChooseHandV1Procedure:
			jankenServiceChooseHandV1Handler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJankenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJankenServiceHandler struct{}

func (UnimplementedJankenServiceHandler) ChooseHandV1(context.Context, *connect.Request[api.JankenServiceChooseHandV1Request]) (*connect.Response[api.JankenServiceChooseHandV1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.JankenService.ChooseHandV1 is not implemented"))
}
