// Code generated by github.com/averak/gamebox/cmd/protoc-gen-gamebox-server. DO NOT EDIT.
// source: api/janken.proto

package api

import (
	connect "connectrpc.com/connect"
	context "context"
	connect1 "github.com/averak/gamebox/app/infrastructure/connect"
	advice "github.com/averak/gamebox/app/infrastructure/connect/advice"
	custom_option "github.com/averak/gamebox/protobuf/custom_option"
	proto "google.golang.org/protobuf/proto"
)

type gamebox_JankenServiceHandler interface {
	ChooseHandV1(ctx context.Context, req *advice.Request[*JankenServiceChooseHandV1Request]) (*JankenServiceChooseHandV1Response, error)
	ChooseHandV1Errors(errs *JankenServiceChooseHandV1Errors)
}

type JankenServiceChooseHandV1Errors struct {
	// The session does not exist.
	RESOURCE_NOT_FOUND *advice.MethodErrDefinition

	causes map[error]*advice.MethodErrDefinition
}

func (e *JankenServiceChooseHandV1Errors) Map(from error, to *advice.MethodErrDefinition) {
	e.causes[from] = to
}

func NewJankenServiceHandler(handler gamebox_JankenServiceHandler, adv advice.Advice) gamebox_JankenServiceHandlerImpl {
	service := File_api_janken_proto.Services().ByName("JankenService")
	causes := [1]map[error]*advice.MethodErrDefinition{{}}
	methodOpts := [1]*advice.MethodOption{}
	for i, m := 0, service.Methods(); i < 1; i++ {
		methodOpts[i] = proto.GetExtension(m.Get(i).Options(), custom_option.E_MethodOption).(*advice.MethodOption)
	}
	handler.ChooseHandV1Errors(&JankenServiceChooseHandV1Errors{
		RESOURCE_NOT_FOUND: methodOpts[0].GetMethodErrorDefinitions()[0],
		causes:             causes[0],
	})
	methodInfo := [1]*advice.MethodInfo{
		advice.NewMethodInfo(methodOpts[0], causes[0]),
	}
	return gamebox_JankenServiceHandlerImpl{handler: handler, advice: adv, methodInfo: methodInfo}
}

type gamebox_JankenServiceHandlerImpl struct {
	handler    gamebox_JankenServiceHandler
	advice     advice.Advice
	methodInfo [1]*advice.MethodInfo
}

func (h gamebox_JankenServiceHandlerImpl) ChooseHandV1(ctx context.Context, req *connect.Request[JankenServiceChooseHandV1Request]) (*connect.Response[JankenServiceChooseHandV1Response], error) {
	res, err := connect1.Invoke(ctx, req.Msg, req.Header(), h.methodInfo[0], h.handler.ChooseHandV1, h.advice)
	if err != nil {
		return nil, err
	}
	return connect.NewResponse(res), nil
}
